;   ***************************************************************
;   * Copyright (C) 2015, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Command processor for a byte stream protocol.  Commands are received in
;   packets starting with a opcode byte and followed by data bytes defined
;   separately for each command.  A bi-directional stream of bytes is assumed,
;   with wrapper routines and macros in this module that can be customized to
;   receive from and write to the streams actually in use.  The Embed
;   multi-tasking system is required by this module.
;
/include "u1ex.ins.aspic"

         extern_flags        ;declare global flag bits EXTERN

;*******************************************************************************
;
;   Configuration constants.
;
stacksz  equ     32 + ntsksave ;task data stack size
lbank    equ     1           ;register bank for the local state of this module
;
;   Derived constants.
;
lbankadr equ     bankadr(lbank) ;address within local state register bank

;*******************************************************************************
;
;   Global state.  All this state is assumed to be in the GBANK register
;   bank by other modules.
;
         defram  gbankadr

         defram  lbankadr

cmdbuf   res     cmdbufsz    ;scratch buffer, used separately each command

         global  cmdbuf

;*******************************************************************************
;
;   Local state.
;
         defram  lbankadr

lock_rsp res     1           ;mutex state for writing to response stream
;
;   Task data stack.  This is in its own linker section so that it can be placed
;   separately.
;
.cmd_stack udata
cmd_stack res    stacksz     ;CMD_TASK private data stack

/if debug then
         global  lock_rsp
  /endif


.cmd     code
;*******************************************************************************
;
;   Customizable routines and macros.  This section is the low level interface
;   to the actual command and response streams.  The rest of the command
;   processor only accesses the streams thru the code in this section.
;

;***************************************
;
;   Local subroutine YIELD
;
;   Let other tasks run for a time slice.  In addition, this routine restarts
;   the command processing logic if a USB reset was received.  That means the
;   previous command stream was aborted and a new one has been started.
;
;   Since this routine calls TASK_YIELD, all registers not listed in TSKSAVE are
;   trashed.
;
         locsub  yield, noregs

         gcall   task_yield  ;give other tasks a chance to run

         dbankif gbankadr
         btfsc   flag_cmdreset ;don't need to reset the command processor ?
         jump    task_restart ;reset the command processor

         leaverest

;***************************************
;
;   Subroutine CMD_INIT
;
;   Initialize the state managed by this module.
;
         glbsub  cmd_init, noregs

         mutex_init rsp      ;init single-threaded lock for the response stream

         popregs savedregs   ;restore registers saved on entry to routine
         extern  cmds_init
         gjump   cmds_init   ;init command routines module, return to caller

;***************************************
;
;   Subroutine CMD_GET8
;
;   Get the next command stream byte into REG0.
;
         glbsub  cmd_get8, regf1

gbloop   unbank              ;back here until input byte is available
         popregs savedregs
         mcall   yield       ;give other tasks a chance to run
         pushregs savedregs
         dbankif gbankadr
         clrf    reg1        ;indicate to transfer byte if one is available
         gcall   usb_get1    ;try to get a byte from the USB
         btfsc   reg1, usbs_noxf ;we got a byte ?
         jump    gbloop      ;no, go back and try again

         leaverest

;***************************************
;
;   Subroutine CMD_PUT8
;
;   Send the byte in REG0 out the response stream.  Nothing is done if the
;   caller is not holding the response stream lock.
;
         glbsub  cmd_put8, regf1

         mutex_skip_lock_us rsp ;we are holding the response stream lock ?
         jump    put8_leave  ;no, ignore the request

put8_loopu unbank            ;back here to retry sending byte via USB
         clrf    reg1        ;indicate to tranfer byte if possible
         gcall   usb_put1    ;try to send the byte
         btfss   reg1, usbs_noxf ;the byte was not sent ?
         jump    put8_leave  ;the byte was sent

         popregs savedregs
         mcall   yield       ;give other tasks a chance to run
         pushregs savedregs
         jump    put8_loopu

put8_leave unbank            ;common exit point
         leaverest

;***************************************
;
;   Subroutine SEND_BYTE_IF
;
;   Send the byte in REG0 to the host if that can be done immediately.  The Z
;   flag is cleared if the byte was sent and set if not.  Either way, this
;   routine always returns "quickly" without waiting on any events.
;
send_byte_if glbsub regf1

         loadk8  reg1, (1 << usbc_nflu) ;do not do deliberate flush
         gcall   usb_put1    ;try to send the byte
         bcf     status, z   ;init to the byte was sent
         btfsc   reg1, usbs_noxf ;the byte really was sent ?
         bsf     status, z   ;no, indicate not sent

         leaverest

;***************************************
;
;   Macro SKIP_CMDBYTE
;
;   Skip the next instruction if a command stream byte is immediately available.
;
;   REG0 and REG1 are trashed.
;
skip_cmdbyte macro
         loadk8  reg1, (1 << usbc_noxf) ;don't tranfer byte, even if available
         gcall   usb_get1    ;try to get USB byte
         btfsc   reg1, usbs_nrdy ;a new byte is available ?
         endm

;***************************************
;
;   Subroutine CMD_LOCK_OUT
;
;   Lock the response stream for exclusive access by this task.  This routine
;   waits indefinitely until the lock is available.
;
         glbsub  cmd_lock_out
         mutex_lock rsp
         leaverest

;***************************************
;
;   Subroutine CMD_UNLOCK_OUT
;
;   Release the lock on the response stream, if held by this task.
;
         glbsub  cmd_unlock_out
         mutex_unlock rsp
         leaverest

;*******************************************************************************
;
;   Subroutine GETBUF
;
;   Get a sequence of input bytes into the local buffer CMDBUF.  The number of
;   bytes to read is in REG1.  All these bytes will be read, but only the first
;   CMDBUFSZ bytes will be saved in the buffer.  REG2 is returned the number of
;   bytes saved into the buffer.
;
getbuf   glbsub  regf0 | regf1

         clrf    reg2        ;init number of bytes in the buffer
         movf    reg1
         bz      gb_leave    ;no bytes to read, all done ?

         lfsr    0, cmdbuf   ;init write pointer to start of buffer
gb_loop  unbank              ;back here each new byte
         pushreg fsr0l       ;temp save buffer pointer
         pushreg fsr0h
         mcall   cmd_get8    ;get this byte into REG0
         popreg  fsr0h       ;restore buffer write pointer
         popreg  fsr0l
         movf    reg2, w     ;get number of bytes already in buffer
         sublw   cmdbufsz-1  ;compare to limit
         skip_wle            ;still room in the buffer ?
         jump    gb_full     ;no, skip writing the byte
         movff   reg0, postinc0 ;stuff the byte into the buffer
         incf    reg2        ;count one more byte in the buffer
gb_full                      ;done with writing byte to buffer
         decfsz  reg1        ;count one less byte left to do
         jump    gb_loop     ;back to do the next byte

gb_leave unbank
         leaverest

;*******************************************************************************
;
;   Subroutine CMD_GET16
;
;   Get the next two bytes from the command stream as a 16 bit integer into
;   REG1:REG0.  The bytes are assumed to be sent in most to least significant
;   order.
;
         glbsub  cmd_get16

         mcall   cmd_get8    ;get the high byte
         movff   reg0, reg1
         mcall   cmd_get8    ;get the low byte

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_GET24
;
;   Get the next three bytes from the command stream as a 24 bit integer into
;   REG2:REG1:REG0.  The bytes are assumed to be sent in most to least
;   significant order.
;
         glbsub  cmd_get24

         mcall   cmd_get8    ;get the high byte
         movff   reg0, reg2
         mcall   cmd_get8
         movff   reg0, reg1
         mcall   cmd_get8    ;get the low byte

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_GET32
;
;   Get the next four bytes from the command stream as a 32 bit integer into
;   REG3:REG2:REG1:REG0.  The bytes are assumed to be sent in most to least
;   significant order.
;
         glbsub  cmd_get32

         mcall   cmd_get8    ;get the high byte
         movff   reg0, reg3
         mcall   cmd_get8
         movff   reg0, reg2
         mcall   cmd_get8
         movff   reg0, reg1
         mcall   cmd_get8    ;get the low byte

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_PUT16
;
;   Send the 16 bits in REG1:REG0 over the response stream.  The bytes are sent
;   in most to least significant order.
;
         glbsub  cmd_put16

         pushreg reg0        ;save REG0 (contains the low byte)

         movff   reg1, reg0
         mcall   cmd_put8
         popreg  reg0        ;restore the low byte into REG0
         mcall   cmd_put8

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_PUT24
;
;   Send the 24 bits in REG2:REG1:REG0 over the response stream.  The bytes are
;   sent in most to least significant order.
;
         glbsub  cmd_put24

         pushreg reg0        ;save REG0 (contains the low byte)

         movff   reg2, reg0
         mcall   cmd_put8
         movff   reg1, reg0
         mcall   cmd_put8
         popreg  reg0        ;restore the low byte into REG0
         mcall   cmd_put8

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_PUT32
;
;   Send the 32 bits in REG3:REG2:REG1:REG0 over the response stream.  The bytes
;   are sent in most to least significant order.
;
         glbsub  cmd_put32

         pushreg reg0        ;save REG0 (contains the low byte)

         movff   reg3, reg0
         mcall   cmd_put8
         movff   reg2, reg0
         mcall   cmd_put8
         movff   reg1, reg0
         mcall   cmd_put8
         popreg  reg0        ;restore the low byte into REG0
         mcall   cmd_put8

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_START
;
;   Start the command stream processing task.  This routine is called during
;   system initialization after all the modules have been individually
;   initialized.
;
         glbsub  cmd_start, regf0 | regf1 | regf2 | regf3 | regf4

         task_create cmd_task, cmd_stack ;create command processing task

         leaverest

;*******************************************************************************
;
;   Routine CMD_TASK
;
;   This routines runs in a separate task.  It receives bytes from the command
;   stream and processes them accordingly.  A task swap is performed explicitly
;   when waiting on external conditions.  Most task swaps are done implicitly
;   from CMD_GET8 and CMD_PUT8.
;
cmd_task unbank              ;task initial start point

task_restart unbank          ;will restart here on a USB reset
         dbankif stkptr
         clrf    stkptr      ;reset the call stack to empty
         stack_set cmd_stack ;reset the data stack to empty
         dbankif gbankadr
         bcf     flag_cmdreset ;clear any pending reset
;
;   Initialize command processing state for after a USB reset.
;
         ;
         ;   Release the NAME_GET_xxx routines if locked by this task.
         ;
         dbankif gbankadr
         btfss   flag_namegcmd ;this task has NAME_GET locked ?
         jump    no_nameglock ;no
         bcf     flag_namegcmd ;indicate no longer locked
         gcall   name_get_end ;release the lock
no_nameglock unbank
         ;
         ;   Release the NAME_SET_xxx routines if locked by this task.
         ;
         dbankif gbankadr
         btfss   flag_namescmd ;this task has NAME_SET locked ?
         jump    no_nameslock ;no
         bcf     flag_namescmd ;indicate no longer locked
         gcall   name_set_end ;release the lock
no_nameslock unbank
;
;   Wait for the USB to be usable before attempting to do USB I/O.
;
cmd_waitusb unbank
         mcall   yield       ;give other tasks a chance to run
         dbankif gbankadr
         btfss   flag_usbon  ;USB is ready for app use ?
         jump    cmd_waitusb ;no, go back and check again
;
;   Execution ends up here after done processing each command or if the command
;   opcode was invalid.
;
cmd_done unbank
         dbankif stkptr
         clrf    stkptr      ;reset the call stack to empty
         stack_set cmd_stack ;reset the data stack to empty
         mutex_unlock rsp    ;release response stream lock if we are holding it
;
;   Get the next command and process it.  The call and data stacks are empty.
;
cmd_next unbank
         mcall   cmd_get8    ;get the opcode byte into REG0
         ;
         ;   Push the address of CMD_DONE onto the call stack.  This allows
         ;   command routines to be implemented as subroutines.
         ;
         push                ;create new call stack level
         movlw   low cmd_done ;set the new entry to address of CMD_DONE
         movwf   tosl
         movlw   high cmd_done
         movwf   tosh
         movlw   upper cmd_done
         movwf   tosu

         dispatch cmd_table  ;jump to address for this command in dispatch table

////////////////////////////////////////////////////////////////////////////////
//
//   Macro CMD_ENTRY n, command
//
//   Defines one dispatch table entry.  N is the 0-255 command opcode of this
//   entry.  COMMAND defines the name of the external routine that executes the
//   command.  The actual name of the external routine is CM<name>_<command>.
//   Dispatch table entries must be defined in ascending opcode order.
//
/macro cmd_entry
         extern  [arg 2]
         dsp_entry [arg 1], [arg 2]
  /endmac

;*******************************************************************************
;
;   Commands dispatch table.
;
.cmd_table code_pack
         dsp_start cmd_table
         dsp_entry 0, cmd_done ;NOP

         cmd_entry 3, cm_fwver ;send 1-255 firmware version number
         cmd_entry 4, cm_nameset ;N chars, set unit name
         cmd_entry 5, cm_nameget ;request unit name
         cmd_entry 9, cm_setb ;write value to port B
         cmd_entry 10, cm_spi1 ;send full SPI frame to slave 1, up to 32 data bits
         cmd_entry 11, cm_spi2 ;send SPI frame to slave 2
         cmd_entry 12, cm_iicw ;send IIC write message
         cmd_entry 13, cm_iicr ;cause IIC read sequence and return data bytes
/if enab_phase then
         cmd_entry 14, cm_phinc ;set phase outputs increment per ms
  /endif
         cmd_entry 15, fift_send_fifo ;get FIFO status
         cmd_entry 16, cm_fifowr ;write to the FIFO
         cmd_entry 17, cm_fiford ;read from the FIFO

         dsp_end cmd_table   ;end of command opcodes dispatch table

         end
